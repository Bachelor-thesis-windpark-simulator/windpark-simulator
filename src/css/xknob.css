@charset "utf-8";

:root {
  --diameter: 8em;
}
.windDiv {
  z-index: 100;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}
.windKnob {
  width: calc(var(--diameter) - 20%);
  height: calc(var(--diameter) - 20%);
}
/*
  * Source: https://css-tricks.com/snippets/sass/placing-items-circle/
  */
.circle-container {
  position: absolute;
  width: var(--diameter);
  height: var(--diameter);
  border-radius: 50%;
  padding: 0;
  list-style: none;
  /*border: solid 5px tomato;*/
  margin: 0px !important;
}
.circle-container > * {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  margin: -3em;
  width: 6em;
  height: 6em;
}
.circle-container > *:nth-of-type(1) {
  transform: rotate(270deg) translate(calc(var(--diameter) / 2)) rotate(-270deg);
}
.circle-container > *:nth-of-type(2) {
  transform: rotate(315deg) translate(calc(var(--diameter) / 2)) rotate(-315deg);
}
.circle-container > *:nth-of-type(3) {
  transform: rotate(0deg) translate(calc(var(--diameter) / 2)) rotate(0deg);
}
.circle-container > *:nth-of-type(4) {
  transform: rotate(45deg) translate(calc(var(--diameter) / 2)) rotate(-45deg);
}
.circle-container > *:nth-of-type(5) {
  transform: rotate(90deg) translate(calc(var(--diameter) / 2)) rotate(-90deg);
}
.circle-container > *:nth-of-type(6) {
  transform: rotate(135deg) translate(calc(var(--diameter) / 2)) rotate(-135deg);
}
.circle-container > *:nth-of-type(7) {
  transform: rotate(180deg) translate(calc(var(--diameter) / 2)) rotate(-180deg);
}
.circle-container > *:nth-of-type(8) {
  transform: rotate(225deg) translate(calc(var(--diameter) / 2)) rotate(-225deg);
}
.circle-container > li {
  display: flex;
  align-items: center;
  justify-content: center;
}
.flex {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 150px;
}
.beschr {
  font-weight: bold;
  font-size: 1.3em;
}
.beschr-en {
  font-size: 1.1em;
}

/*/////////////////////////////////////////////
//										    //
// Source:                                  //
// https://github.com/denilsonsa/html5-knob //
//										    //
//////////////////////////////////////////////*/

/* This CSS file contains some default styling. */

x-knob {
  display: inline-block;
  width: 2em;
  height: 2em;
  z-index: 100;

  /* An internal element is target of pointer-events, but not this external x-knob element. */
  pointer-events: none;
}

/*This only looks good if divisions >= 2.*/
x-knob::shadow .knob_gfx {
  transition: 200ms transform;
}
